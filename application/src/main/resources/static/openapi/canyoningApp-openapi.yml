openapi: 3.0.3
info:
  title: Swagger CanyoningApp - OpenAPI 3.0
  description: Swagger of canyoning app
  contact:
    email: delgadofernandez.luis@gmail.com
  version: 0.0.1
servers:
  - url: http://localhost:8080
  #- url: https://misbarrancosbdesarrollo.com:8443
tags:
  - name: User
    description: User operations
  - name: Canyon
    description: Canyon operations
  - name: Review
    description: Review operations
  - name: Activity
    description: Activity operations
  - name: Message
    description: CanyonMessage operations
  - name: Image
    description: Image operations
  - name: Article
    description: Article operations
paths:
  /createUser:
    post:
      tags:
        - User
      summary: Create a new user
      description: Create a new user
      operationId: createUser
      requestBody:
        description: data from the user
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreate'
        required: true
      security: [ ]
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserOut'
        400:
          $ref: '#/components/responses/400BadRequest'
        409:
          $ref: '#/components/responses/409Exists'
  /validateUser:
    get:
      tags:
        - User
      summary: Validate user
      description: Validate an user created withour verify
      operationId: validateUser
      parameters:
        - name: token
          in: query
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successful operation
          content:
            text/plain:
              schema:
                type: string
  /users:
    get:
      tags:
        - User
      summary: Get all users
      description: Get all users filtering bay differents fields
      operationId: getUsers
      parameters:
        - name: email
          in: query
          required: false
          schema:
            type: string
        - name: name
          in: query
          required: false
          schema:
            type: string
        - name: location
          in: query
          required: false
          schema:
            type: string
        - name: page
          in: query
          description: Número de página (empezando desde 0)
          required: false
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          description: Número de elementos por página
          required: false
          schema:
            type: integer
            default: 20
        - name: sort
          in: query
          description: Criterios de ordenación en el formato propiedad(,asc|desc). El orden por defecto es ascendente.
          required: false
          schema:
            type: string
            default: userId,asc
      x-spring-paginated: true
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SimpleUser'
          headers:
            Link:
              $ref: '#/components/headers/Link'
            X-Page-Number:
              $ref: '#/components/headers/X-Page-Number'
            X-Total-Elements:
              $ref: '#/components/headers/X-Total-Elements'
            X-Total-Pages:
              $ref: '#/components/headers/X-Total-Pages'
        400:
          $ref: '#/components/responses/400BadRequest'
  /users/{email}:
    get:
      tags:
        - User
      summary: Get an user
      description: Get user by id
      operationId: getUser
      parameters:
        - name: email
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserOut'
        400:
          $ref: '#/components/responses/400BadRequest'
    put:
      tags:
        - User
      summary: Update your user
      description: Update your user
      operationId: updateUser
      parameters:
        - name: email
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SimpleUser'
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleUser'
        400:
          $ref: '#/components/responses/400BadRequest'
    delete:
      tags:
        - User
      summary: Deletes a user
      description: delete a user
      operationId: deleteUser
      parameters:
        - name: email
          in: path
          required: true
          schema:
            type: string
      responses:
        204:
          description: 'Succesfull delete'
        400:
          $ref: '#/components/responses/400BadRequest'
  /updatePassword:
    put:
      tags:
        - User
      summary: Update a password
      description: Return your password
      operationId: updatePassword
      security: [ ]
      parameters:
        - name: email
          in: query
          required: true
          schema:
            type: string
        - name: token
          in: query
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
                  example: your_password
      responses:
        200:
          description: Successful operation
        400:
          $ref: '#/components/responses/400BadRequest'
    post:
      tags:
        - User
      summary: Request update a password
      description: Request update a password, it send an email and the user could change its password for an hour
      operationId: requestUpdatePassword
      security: [ ]
      parameters:
        - name: email
          in: query
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successful operation
        400:
          $ref: '#/components/responses/400BadRequest'
  /login:
    post:
      tags:
        - User
      summary: Login
      description: Login
      operationId: login
      parameters:
        - name: email
          in: query
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
                  example: your_password
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: boolean
        400:
          $ref: '#/components/responses/400BadRequest'
  /users/{email}/plan/{plan}:
    put:
      tags:
        - User
      summary: Update your plan
      description: Update your plan
      operationId: updatePlan
      parameters:
        - name: email
          in: path
          required: true
          schema:
            type: string
        - name: plan
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SimpleUser'
        400:
          $ref: '#/components/responses/400BadRequest'
  /canyons:
    post:
      tags:
        - Canyon
      summary: Create a new canyon
      description: Create a new canyon
      operationId: createCanyon
      requestBody:
        description: data from the canyon
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Canyon'
        required: false
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Canyon'
        400:
          $ref: '#/components/responses/400BadRequest'
    get:
      tags:
        - Canyon
      summary: Get all canyon
      description: Get all canyon filtering by differents fields
      operationId: getCanyons
      parameters:
        - name: name
          in: query
          required: false
          schema:
            type: string
        - name: season
          in: query
          required: false
          schema:
            type: string
        - name: river
          in: query
          required: false
          schema:
            type: string
        - name: country
          in: query
          required: false
          schema:
            type: string
        - name: population
          in: query
          required: false
          schema:
            type: string
        - name: page
          in: query
          description: Número de página (empezando desde 0)
          required: false
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          description: Número de elementos por página
          required: false
          schema:
            type: integer
            default: 20
        - name: sort
          in: query
          description: Criterios de ordenación en el formato propiedad(,asc|desc). El orden por defecto es ascendente.
          required: false
          schema:
            type: string
            default: "canyonId,asc"
      x-spring-paginated: true
      responses:
        201:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SimpleCanyon'
          headers:
            Link:
              $ref: '#/components/headers/Link'
            X-Page-Number:
              $ref: '#/components/headers/X-Page-Number'
            X-Total-Elements:
              $ref: '#/components/headers/X-Total-Elements'
            X-Total-Pages:
              $ref: '#/components/headers/X-Total-Pages'
        400:
          $ref: '#/components/responses/400BadRequest'
  /canyons/favourites:
    get:
      tags:
        - Canyon
      summary: Get all canyon
      description: Get all canyon filtering by differents fields
      operationId: getFavouriteCanyons
      parameters:
        - name: name
          in: query
          required: false
          schema:
            type: string
        - name: season
          in: query
          required: false
          schema:
            type: string
        - name: river
          in: query
          required: false
          schema:
            type: string
        - name: country
          in: query
          required: false
          schema:
            type: string
        - name: population
          in: query
          required: false
          schema:
            type: string
        - name: page
          in: query
          description: Número de página (empezando desde 0)
          required: false
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          description: Número de elementos por página
          required: false
          schema:
            type: integer
            default: 20
        - name: sort
          in: query
          description: Criterios de ordenación en el formato propiedad(,asc|desc). El orden por defecto es ascendente.
          required: false
          schema:
            type: string
            default: "canyonId,asc"
      x-spring-paginated: true
      responses:
        201:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SimpleCanyon'
          headers:
            Link:
              $ref: '#/components/headers/Link'
            X-Page-Number:
              $ref: '#/components/headers/X-Page-Number'
            X-Total-Elements:
              $ref: '#/components/headers/X-Total-Elements'
            X-Total-Pages:
              $ref: '#/components/headers/X-Total-Pages'
        400:
          $ref: '#/components/responses/400BadRequest'
  /canyons/favourites/{canyonId}:
    post:
      tags:
        - Canyon
      summary: Add canyon to favourites
      operationId: addCanyonToFavourites
      parameters:
        - name: canyonId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/Id'
      responses:
        201:
          description: Successful operation
        400:
          $ref: '#/components/responses/400BadRequest'
    delete:
      tags:
        - Canyon
      summary: Deletes a favourite
      description: delete a canyon from favourites
      operationId: deleteCanyonFromFavourites
      parameters:
        - name: canyonId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/Id'
      responses:
        204:
          description: 'Succesfull delete'
        400:
          $ref: '#/components/responses/400BadRequest'
  /canyons/map:
    get:
      tags:
        - Canyon
      summary: Get Locations
      description: Get location from canyons
      operationId: getLocations
      responses:
        200:
          description: Succesfull operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LocationCanyon'
  /canyons/{canyonId}:
    get:
      tags:
        - Canyon
      summary: Get one canyon
      description: Get canyon by id
      operationId: getCanyon
      parameters:
        - name: canyonId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/Id'
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Canyon'
        400:
          $ref: '#/components/responses/400BadRequest'
    put:
      tags:
        - Canyon
      summary: Update your canyon
      description: Update your canyon
      operationId: updateCanyon
      parameters:
        - name: canyonId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/Id'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Canyon'
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Canyon'
        400:
          $ref: '#/components/responses/400BadRequest'
    delete:
      tags:
        - Canyon
      summary: Deletes a canyon
      description: delete a canyon
      operationId: deleteCanyon
      parameters:
        - name: canyonId
          in: path
          description: User id to delete
          required: true
          schema:
            $ref: '#/components/schemas/Id'
      responses:
        204:
          description: 'Succesfull delete'
        400:
          $ref: '#/components/responses/400BadRequest'
  /canyons/{canyonId}/download:
    get:
      tags:
        - Canyon
      summary: Download a canyon
      description: Download canyon by id and return a PDF file
      operationId: downloadCanyon
      parameters:
        - name: canyonId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/Id'
        - name: email
          in: query
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: Successful operation
          content:
            application/pdf:
              schema:
                type: string
                format: binary
        '400':
          $ref: '#/components/responses/400BadRequest'
        '404':
          description: Canyon not found
        '500':
          description: Internal server error
  /reviews/canyon:
    post:
      tags:
        - Review
      summary: Create a new review
      description: Create a new review
      operationId: createCanyonReview
      requestBody:
        description: data from the review
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CanyonReview'
        required: true
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CanyonReviewResponse'
        400:
          $ref: '#/components/responses/400BadRequest'
    get:
      tags:
        - Review
      summary: Get all review
      description: Get all review filtering by differents fields
      operationId: getCanyonReviews
      parameters:
        - name: canyonId
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: page
          in: query
          description: Número de página (empezando desde 0)
          required: false
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          description: Número de elementos por página
          required: false
          schema:
            type: integer
            default: 20
        - name: sort
          in: query
          description: Criterios de ordenación en el formato propiedad(,asc|desc). El orden por defecto es ascendente.
          required: false
          schema:
            type: string
            default: "reviewId,asc"
      x-spring-paginated: true
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SimpleCanyonReview'
          headers:
            Link:
              $ref: '#/components/headers/Link'
            X-Page-Number:
              $ref: '#/components/headers/X-Page-Number'
            X-Total-Elements:
              $ref: '#/components/headers/X-Total-Elements'
            X-Total-Pages:
              $ref: '#/components/headers/X-Total-Pages'
        400:
          $ref: '#/components/responses/400BadRequest'
  /reviews/canyon/{canyonReviewId}:
    get:
      tags:
        - Review
      summary: Get a review
      description: Get review by id
      operationId: getCanyonReview
      parameters:
        - name: canyonReviewId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/Id'
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CanyonReviewResponse'
        400:
          $ref: '#/components/responses/400BadRequest'
    put:
      tags:
        - Review
      summary: Update your review
      description: Update your review
      operationId: updateCanyonReview
      parameters:
        - name: canyonReviewId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/Id'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CanyonReview'
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CanyonReviewResponse'
        400:
          $ref: '#/components/responses/400BadRequest'
    delete:
      tags:
        - Review
      summary: Deletes a review
      description: delete a review
      operationId: deleteCanyonReview
      parameters:
        - name: canyonReviewId
          in: path
          description: Review id to delete
          required: true
          schema:
            $ref: '#/components/schemas/Id'
      responses:
        204:
          description: 'Succesfull delete'
        400:
          $ref: '#/components/responses/400BadRequest'
  /reviews/canyon/{canyonReviewId}/share:
    get:
      tags:
        - Review
      summary: Share your review qr
      description: Share your review qr
      operationId: shareCanyonReview
      parameters:
        - name: canyonReviewId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/Id'
      responses:
        200:
          description: Successful operation
        400:
          $ref: '#/components/responses/400BadRequest'
    post:
      tags:
        - Review
      summary: Insert an user on your review
      description: Insert an user on your review
      operationId: insertUserIntoCanyonReview
      parameters:
        - name: canyonReviewId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/Id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserIdsRequest'
      responses:
        200:
          description: Successful operation
        400:
          $ref: '#/components/responses/400BadRequest'
  /activities:
    post:
      tags:
        - Activity
      summary: Create a new activity
      description: Create a new activity
      operationId: createActivity
      requestBody:
        description: data from the activity
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Activity'
        required: true
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Activity'
        400:
          $ref: '#/components/responses/400BadRequest'
    get:
      tags:
        - Activity
      summary: Get all activity
      description: Get all activity filtering by differents fields
      operationId: getActivities
      parameters:
        - name: date
          in: query
          required: false
          schema:
            type: string
            format: date
        - name: meetingPlace
          in: query
          required: false
          schema:
            type: string
        - name: page
          in: query
          description: Número de página (empezando desde 0)
          required: false
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          description: Número de elementos por página
          required: false
          schema:
            type: integer
            default: 20
        - name: sort
          in: query
          description: Criterios de ordenación en el formato propiedad(,asc|desc). El orden por defecto es ascendente.
          required: false
          schema:
            type: string
            default: "activityId,asc"
      x-spring-paginated: true
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SimpleActivity'
          headers:
            Link:
              $ref: '#/components/headers/Link'
            X-Page-Number:
              $ref: '#/components/headers/X-Page-Number'
            X-Total-Elements:
              $ref: '#/components/headers/X-Total-Elements'
            X-Total-Pages:
              $ref: '#/components/headers/X-Total-Pages'
        400:
          $ref: '#/components/responses/400BadRequest'
  /activities/{activityId}:
    get:
      tags:
        - Activity
      summary: Get an activity
      description: Get activity by id
      operationId: getActivity
      parameters:
        - name: activityId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/Id'
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Activity'
        400:
          $ref: '#/components/responses/400BadRequest'
    put:
      tags:
        - Activity
      summary: Update your activity
      description: Update your activity
      operationId: updateActivity
      parameters:
        - name: activityId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/Id'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Activity'
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Activity'
        400:
          $ref: '#/components/responses/400BadRequest'
    delete:
      tags:
        - Activity
      summary: Deletes a activity
      description: delete a activity
      operationId: deleteActivity
      parameters:
        - name: activityId
          in: path
          description: Activity id to delete
          required: true
          schema:
            $ref: '#/components/schemas/Id'
      responses:
        204:
          description: 'Succesfull delete'
        400:
          $ref: '#/components/responses/400BadRequest'
  /activities/{activityId}/share:
    get:
      tags:
        - Activity
      summary: Share your activity qr
      description: Share your activity qr
      operationId: shareActivity
      parameters:
        - name: activityId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/Id'
      responses:
        200:
          description: Successful operation
        400:
          $ref: '#/components/responses/400BadRequest'
  /activities/{activityId}/share/{userId}:
    post:
      tags:
        - Activity
      summary: Insert an user on your activity
      description: Insert an user on your activity
      operationId: insertActivity
      parameters:
        - name: activityId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/Id'
        - name: userId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/Id'
      responses:
        200:
          description: Successful operation
        400:
          $ref: '#/components/responses/400BadRequest'
  /article:
    post:
      tags:
        - Article
      summary: Post an article
      description: Post a nes article
      operationId: createArticle
      requestBody:
        description: data from the article
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Article'
        required: true
      responses:
        201:
          description: Successful operation
        400:
          $ref: '#/components/responses/400BadRequest'
    get:
      tags:
        - Article
      summary: Get all articles
      description: Return all articles paginated
      operationId: getAtricles
      parameters:
        - name: title
          in: query
          description: title of the article
          required: false
          schema:
            type: string
        - name: location
          in: query
          description: it will find articles near the location
          required: false
          schema:
            type: string
        - name: organizer
          in: query
          description: organizer of the article
          required: false
          schema:
            type: string
        - name: page
          in: query
          description: Número de página (empezando desde 0)
          required: false
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          description: Número de elementos por página
          required: false
          schema:
            type: integer
            default: 20
        - name: sort
          in: query
          description: Criterios de ordenación en el formato propiedad(,asc|desc). El orden por defecto es ascendente.
          required: false
          schema:
            type: string
            default: "articleId,asc"
      x-spring-paginated: true
      responses:
        201:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SimpleArticle'
          headers:
            Link:
              $ref: '#/components/headers/Link'
            X-Page-Number:
              $ref: '#/components/headers/X-Page-Number'
            X-Total-Elements:
              $ref: '#/components/headers/X-Total-Elements'
            X-Total-Pages:
              $ref: '#/components/headers/X-Total-Pages'
        400:
          $ref: '#/components/responses/400BadRequest'
  /article/{articleId}:
    get:
      tags:
        - Article
      summary: Get an article by id
      description: Find an article by id
      operationId: getArticleById
      parameters:
        - name: articleId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/Id'
      responses:
        200:
          description: Succesful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Article'
        404:
          $ref: '#/components/responses/404NotFound'
    delete:
      tags:
        - Article
      summary: delete an article
      description: delete an article
      operationId: deleteArticle
      parameters:
        - name: articleId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/Id'
      responses:
        204:
          description: Successful operation
        400:
          $ref: '#/components/responses/400BadRequest'
    put:
      tags:
        - Article
      summary: update an article
      description: update an article
      operationId: updateArticle
      parameters:
        - name: articleId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/Id'
      requestBody:
        description: data from the message
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Article'
      responses:
        200:
          description: Successful operation
        400:
          $ref: '#/components/responses/400BadRequest'
  /messages:
    post:
      tags:
        - Message
      summary: Post a new message
      description: Post a new message
      operationId: postMessage
      requestBody:
        description: data from the message
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MessageIn'
        required: true
      responses:
        201:
          description: Successful operation
        400:
          $ref: '#/components/responses/400BadRequest'
  /messages/{activityType}/activity/{activityId}:
    get:
      tags:
        - Message
      summary: Get all message about an activity
      description: Get all message about an activity
      operationId: getMessages
      parameters:
        - name: activityType
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/ActivityType'
        - name: activityId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/Id'
        - name: page
          in: query
          description: Número de página (empezando desde 0)
          required: false
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          description: Número de elementos por página
          required: false
          schema:
            type: integer
            default: 20
        - name: sort
          in: query
          description: Criterios de ordenación en el formato propiedad(,asc|desc). El orden por defecto es messageId desc.
          required: false
          schema:
            type: string
            default: "messageId,desc"
      x-spring-paginated: true
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MessageOut'
        400:
          $ref: '#/components/responses/400BadRequest'
  /messages/{messageId}:
    put:
      tags:
        - Message
      summary: Update a meesage
      description: Update a message
      operationId: updateMessage
      parameters:
        - name: messageId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/Id'
      requestBody:
        description: data from the message
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MessageIn'
        required: true
      responses:
        200:
          description: Successful operation
        400:
          $ref: '#/components/responses/400BadRequest'
  /message/{messageId}/activityType/{activityType}:
    delete:
      tags:
        - Message
      summary: Delete a message
      description: Delete a message
      operationId: deleteMessage
      parameters:
        - name: messageId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/Id'
        - name: activityType
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/ActivityType'
      responses:
        204:
          description: Successful operation
        400:
          $ref: '#/components/responses/400BadRequest'
  /images:
    post:
      tags:
        - Image
      summary: Post an image
      description: Post an image
      operationId: postImage
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                name:
                  type: string
                dir:
                  type: string
              required:
                - file
      responses:
        201:
          description: Successful operation
        400:
          $ref: '#/components/responses/400BadRequest'
  /images/{image}/{dir}:
    get:
      tags:
        - Image
      summary: Obtener una imagen por su nombre
      description: Recupera una imagen desde el servidor utilizando su ID
      parameters:
        - name: image
          in: path
          required: true
          schema:
            type: string
          description: El nombre de la imagen a recuperar
        - name: dir
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Imagen recuperada exitosamente
          content:
            image/jpeg:
              schema:
                type: string
                format: binary
            image/png:
              schema:
                type: string
                format: binary
        '404':
          description: Imagen no encontrada
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
components:
  schemas:
    Article:
      allOf:
        - $ref: '#/components/schemas/SimpleArticle'
        - properties:
            description:
              type: string
            image:
              type: string
            price:
              type: string
            link:
              type: string
            instagram:
              type: string
            twitter:
              type: string
            tiktok:
              type: string
            facebook:
              type: string
            createdBy:
              type: string
    SimpleArticle:
      type: object
      properties:
        articleId:
          $ref: '#/components/schemas/Id'
        articleType:
          type: integer
        organizer:
          type: string
        location:
          type: string
        title:
          type: string
        description:
          type: string
        articleDate:
          type: string
          format: date-time
    UserIdsRequest:
      type: array
      items:
        $ref: '#/components/schemas/Id'
    Message:
      type: object
      properties:
        messageId:
          $ref: '#/components/schemas/Id'
        placeId:
          $ref: '#/components/schemas/Id'
        message:
          type: string
        date:
          type: string
          format: date
        flow:
          type: integer
        temperature:
          type: integer
    MessageIn:
      allOf:
        - $ref: '#/components/schemas/Message'
        - properties:
            typePlace:
              $ref: '#/components/schemas/ActivityType'
    MessageOut:
      allOf:
        - $ref: '#/components/schemas/Message'
        - properties:
            user:
              $ref: '#/components/schemas/SimpleUser'
    ActivityType:
      type: string
      enum:
        - CANYON
    SimpleActivity:
      type: object
      properties:
        activityId:
          $ref: '#/components/schemas/Id'
        user:
          $ref: '#/components/schemas/SimpleUser'
        date:
          type: string
          format: date
        meetingPlace:
          type: string
        activityType:
          type: string
    Activity:
      allOf:
        - $ref: '#/components/schemas/SimpleActivity'
        - properties:
            capacity:
              type: integer
            meetingTime:
              type: string
            description:
              type: string
            qr:
              type: string
            participants:
              type: array
              items:
                $ref: '#/components/schemas/Id'
    LocationCanyon:
      type: object
      properties:
        canyonId:
          $ref: '#/components/schemas/Id'
        name:
          type: string
        season:
          type: string
        longitud:
          type: string
        latitud:
          type: string
        country:
          type: string
        canyonDifficulty:
          type: array
          items:
            $ref: '#/components/schemas/CanyonDifficulty'
    SimpleCanyon:
      type: object
      properties:
        canyonId:
          $ref: '#/components/schemas/Id'
        name:
          type: string
        season:
          type: string
        river:
          type: string
        population:
          type: string
        country:
          type: string
    Canyon:
      allOf:
        - $ref: '#/components/schemas/SimpleCanyon'
        - properties:
            favourite:
              type: boolean
            description:
              type: string
            coverage:
              type: string
            croquis:
              type: string
            access:
              type: string
            approach:
              type: string
            descent:
              type: string
            _return:
              type: string
            scape:
              type: string
            location:
              $ref: '#/components/schemas/CanyonLocation'
            canyonRappeling:
              type: array
              items:
                $ref: '#/components/schemas/CanyonRappeling'
            canyonDescent:
              type: array
              items:
                $ref: '#/components/schemas/CanyonDescent'
            canyonSchedule:
              type: array
              items:
                $ref: '#/components/schemas/CanyonSchedule'
            canyonLink:
              type: array
              items:
                $ref: '#/components/schemas/CanyonLink'
            canyonProhibition:
              type: array
              items:
                $ref: '#/components/schemas/CanyonProhibition'
            canyonDifficulty:
              type: array
              items:
                $ref: '#/components/schemas/CanyonDifficulty'
            canyonCanyonNear:
              type: array
              items:
                $ref: '#/components/schemas/CanyonCanyonNear'
            canyonControlLevel:
              type: array
              items:
                $ref: '#/components/schemas/CanyonControlLevel'
    CanyonLocation:
      type: object
      properties:
        canyonId:
          $ref: '#/components/schemas/Id'
        country:
          type: string
        population:
          type: string
        latitud:
          type: string
        longitud:
          type: string
        zone:
          type: string
    CanyonCanyonNear:
      type: object
      properties:
        principalCanyon:
          $ref: '#/components/schemas/Id'
        nearCanyon:
          type: string
    CanyonControlLevel:
      type: object
      properties:
        canyonId:
          $ref: '#/components/schemas/Id'
        caudalLevel:
          type: string
        name:
          type: string
        controlPoint:
          type: string
    CanyonDifficulty:
      type: object
      properties:
        descentNumber:
          type: integer
        canyonId:
          $ref: '#/components/schemas/Id'
        difficultyDesc:
          type: string
    CanyonProhibition:
      type: object
      properties:
        canyonProhibitionId:
          $ref: '#/components/schemas/Id'
        canyonId:
          $ref: '#/components/schemas/Id'
        description:
          type: string
    CanyonLink:
      type: object
      properties:
        canyonLinkId:
          $ref: '#/components/schemas/Id'
        canyonId:
          $ref: '#/components/schemas/Id'
        link:
          type: string
        title:
          type: string
    CanyonSchedule:
      type: object
      properties:
        canyonId:
          $ref: '#/components/schemas/Id'
        car:
          type: integer
        descentNumber:
          type: integer
        approach:
          type: string
        descent:
          type: string
        _return:
          type: string
    CanyonDescent:
      type: object
      properties:
        canyonId:
          $ref: '#/components/schemas/Id'
        descentNumber:
          type: integer
        length:
          type: string
        slope:
          type: string
        rapelNum:
          type: string
        maxLength:
          type: string
        equipment:
          type: string
    CanyonRappeling:
      type: object
      properties:
        canyonId:
          $ref: '#/components/schemas/Id'
        descentNumber:
          type: integer
        step:
          type: string
        stepType:
          type: string
        length:
          type: string
        location:
          type: string
        description:
          type: string
    SimpleCanyonReview:
      properties:
        canyonReviewId:
          $ref: '#/components/schemas/Id'
        canyon:
          $ref: '#/components/schemas/SimpleCanyon'
        user:
          $ref: '#/components/schemas/SimpleUser'
    CanyonReview:
      allOf:
        - $ref: '#/components/schemas/SimpleCanyonReview'
        - properties:
            date:
              type: string
              format: date
            duration:
              type: integer
            combinedCar:
              type: boolean
            caudal:
              type: integer
            description:
              type: string
            users:
              type: array
              items:
                $ref: '#/components/schemas/SimpleUser'
    CanyonReviewResponse:
      allOf:
        - $ref: '#/components/schemas/CanyonReview'
        - properties:
            qr:
              type: string
    SimpleUser:
      type: object
      properties:
        userId:
          $ref: '#/components/schemas/Id'
        email:
          type: string
          example: theUser
        name:
          type: string
          example: John
        lastName:
          type: string
          example: James
        location:
          type: string
        description:
          type: string
        birthDay:
          type: string
          format: date
    UserOut:
      allOf:
        - $ref: '#/components/schemas/SimpleUser'
        - type: object
          properties:
            plan:
              type: integer
            guia:
              type: boolean
            age:
              type: integer
    UserCreate:
      allOf:
        - $ref: '#/components/schemas/SimpleUser'
        - type: object
          properties:
            password:
              type: string
              example: '12345'
    Id:
      type: integer
      format: int64
    Error:
      type: object
      properties:
        errorCode:
          type: string
        description:
          type: string
        cause:
          type: string
  responses:
    400BadRequest:
      description: Bad Request. Check the parameters or body of the request.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    401Unauthenticated:
      description: Unauthenticated. Check the credentials.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    403Forbidden:
      description: The user is not authorized for this operation.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    404NotFound:
      description: The entity requested not exists.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    409Exists:
      description: Entity already exists with the same ID or combination of unique properties.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    409Conflict:
      description: The operation cannot be made because a conflict with the current state of the target resource.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
  securitySchemes:
    basic:
      type: http
      scheme: basic
  headers:
    Link:
      description: >-
        The Link header provides information about the pagination of the response.
      schema:
        type: string
    X-Page-Number:
      description: >-
        The current page number of the response.
      schema:
        type: integer
    X-Total-Elements:
      description: >-
        The total number of elements available in the response.
      schema:
        type: integer
    X-Total-Pages:
      description: >-
        The total number of pages available in the response.
      schema:
        type: integer
security:
  - basic: [ ]
